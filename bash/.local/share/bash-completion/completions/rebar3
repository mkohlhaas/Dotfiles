# bash completion file for rebar3 (autogenerated by rebar3).

_rebar3_ref_idx() {
   startc=$1
   # is at least one of the two previous words a flag?
    prev=${COMP_CWORD}-${startc}+2
    if [[ ${COMP_WORDS[${prev}]} == -* || ${COMP_WORDS[${prev}-1]} == -*  ]] ; then
        startc=$((startc+1))
        _rebar3_ref_idx $startc
    fi
    return $startc
}

_rebar3(){
   local cur sopts lopts cmdsnvars refidx 
   local prev1 prev2 prev3
   COMPREPLY=()
   _rebar3_ref_idx 3
   refidx=$?
   cur="${COMP_WORDS[COMP_CWORD]}"
   prev1="${COMP_WORDS[COMP_CWORD-${refidx}+2]}"
   prev2="${COMP_WORDS[COMP_CWORD-${refidx}+1]}"
   prev3="${COMP_WORDS[COMP_CWORD-${refidx}+0]}"
       if [[ ${prev1} == "rebar3" ]] ; then
           sopts="-h -v"
           lopts="--help --version"
           cmdsnvars="do \
plugins \
experimental \
local \
alias \
xref \
version \
upgrade \
update \
unlock \
tar \
shell \
report \
relup \
release \
path \
pkgs \
new \
help \
get-deps \
eunit \
escriptize \
edoc \
dialyzer \
tree \
deps \
cover \
completion \
compile \
ct \
clean \
as"
       elif [[ ${prev1} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="plugins experimental local alias xref version upgrade update unlock tar shell report relup release path pkgs new help get-deps eunit escriptize edoc dialyzer tree deps cover completion compile ct clean as"
elif [[ ${prev1} == plugins && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="upgrade list"
elif [[ ${prev1} == upgrade && ${prev2} == plugins && ${prev3} == do ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == list && ${prev2} == plugins && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == experimental && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="vendor manifest"
elif [[ ${prev1} == vendor && ${prev2} == experimental && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == manifest && ${prev2} == experimental && ${prev3} == do ]] ; then
      sopts="-f -t"
       lopts="--format --to"
       cmdsnvars=""
elif [[ ${prev1} == local && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="upgrade install"
elif [[ ${prev1} == upgrade && ${prev2} == local && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == install && ${prev2} == local && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == alias && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == xref && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == version && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == upgrade && ${prev2} == do ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == update && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == unlock && ${prev2} == do ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == tar && ${prev2} == do ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == shell && ${prev2} == do ]] ; then
      sopts="-r -v"
       lopts="--config --name --sname --setcookie --script --apps --relname --relvsn --start-clean --env-file --user_drv_args --eval"
       cmdsnvars=""
elif [[ ${prev1} == report && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == relup && ${prev2} == do ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == release && ${prev2} == do ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == path && ${prev2} == do ]] ; then
      sopts="-s"
       lopts="--app --base --bin --ebin --lib --priv --separator --src --rel"
       cmdsnvars=""
elif [[ ${prev1} == pkgs && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == new && ${prev2} == do ]] ; then
      sopts="-f"
       lopts="--force"
       cmdsnvars=""
elif [[ ${prev1} == help && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == get-deps && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == eunit && ${prev2} == do ]] ; then
      sopts="-c -p -d -f -m -t -s -g -v"
       lopts="--app --application --cover --cover_export_name --profile --dir --file --module --test --suite --generator --verbose --name --sname --sys_config --setcookie"
       cmdsnvars=""
elif [[ ${prev1} == escriptize && ${prev2} == do ]] ; then
      sopts="-a"
       lopts="--main-app"
       cmdsnvars=""
elif [[ ${prev1} == edoc && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == dialyzer && ${prev2} == do ]] ; then
      sopts="-i -u -s -a"
       lopts="--incremental --update-plt --succ-typings --base-plt-location --plt-location --plt-prefix --app --base-plt-prefix --statistics"
       cmdsnvars=""
elif [[ ${prev1} == tree && ${prev2} == do ]] ; then
      sopts="-v"
       lopts="--verbose"
       cmdsnvars=""
elif [[ ${prev1} == deps && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == cover && ${prev2} == do ]] ; then
      sopts="-r -v -m"
       lopts="--reset --verbose --min_coverage"
       cmdsnvars=""
elif [[ ${prev1} == completion && ${prev2} == do ]] ; then
      sopts="-a -f -s"
       lopts="--aliases --file --shell"
       cmdsnvars=""
elif [[ ${prev1} == compile && ${prev2} == do ]] ; then
      sopts="-d"
       lopts="--deps_only"
       cmdsnvars=""
elif [[ ${prev1} == ct && ${prev2} == do ]] ; then
      sopts="-c -v"
       lopts="--dir --suite --group --case --label --config --spec --join_specs --allow_user_terms --logdir --logopts --verbosity --cover --cover_export_name --repeat --duration --until --force_stop --basic_html --stylesheet --decrypt_key --decrypt_file --abort_if_missing_suites --multiply_timetraps --scale_timetraps --create_priv_dir --include --readable --verbose --name --sname --setcookie --sys_config --compile_only --retry --fail_fast"
       cmdsnvars=""
elif [[ ${prev1} == clean && ${prev2} == do ]] ; then
      sopts="-a -p"
       lopts="--all --apps --profile"
       cmdsnvars=""
elif [[ ${prev1} == as && ${prev2} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="test prod"
elif [[ ${prev1} == test && ${prev2} == as && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == prod && ${prev2} == as && ${prev3} == do ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == plugins ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="upgrade list"
elif [[ ${prev1} == upgrade && ${prev2} == plugins ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == list && ${prev2} == plugins ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == experimental ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="vendor manifest"
elif [[ ${prev1} == vendor && ${prev2} == experimental ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == manifest && ${prev2} == experimental ]] ; then
      sopts="-f -t"
       lopts="--format --to"
       cmdsnvars=""
elif [[ ${prev1} == local ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="upgrade install"
elif [[ ${prev1} == upgrade && ${prev2} == local ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == install && ${prev2} == local ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == alias ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == xref ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == version ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == upgrade ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == update ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == unlock ]] ; then
      sopts="-a"
       lopts="--all"
       cmdsnvars=""
elif [[ ${prev1} == tar ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == shell ]] ; then
      sopts="-r -v"
       lopts="--config --name --sname --setcookie --script --apps --relname --relvsn --start-clean --env-file --user_drv_args --eval"
       cmdsnvars=""
elif [[ ${prev1} == report ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == relup ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == release ]] ; then
      sopts="-n -v -u -o -h -l -d -i -a -c -r -m"
       lopts="--all --relname --relvsn --upfrom --output-dir --help --lib-dir --dev-mode --include-erts --override --config --overlay_vars --vm_args --sys_config --system_libs --version --root --relnames"
       cmdsnvars=""
elif [[ ${prev1} == path ]] ; then
      sopts="-s"
       lopts="--app --base --bin --ebin --lib --priv --separator --src --rel"
       cmdsnvars=""
elif [[ ${prev1} == pkgs ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == new ]] ; then
      sopts="-f"
       lopts="--force"
       cmdsnvars=""
elif [[ ${prev1} == help ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == get-deps ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == eunit ]] ; then
      sopts="-c -p -d -f -m -t -s -g -v"
       lopts="--app --application --cover --cover_export_name --profile --dir --file --module --test --suite --generator --verbose --name --sname --sys_config --setcookie"
       cmdsnvars=""
elif [[ ${prev1} == escriptize ]] ; then
      sopts="-a"
       lopts="--main-app"
       cmdsnvars=""
elif [[ ${prev1} == edoc ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == dialyzer ]] ; then
      sopts="-i -u -s -a"
       lopts="--incremental --update-plt --succ-typings --base-plt-location --plt-location --plt-prefix --app --base-plt-prefix --statistics"
       cmdsnvars=""
elif [[ ${prev1} == tree ]] ; then
      sopts="-v"
       lopts="--verbose"
       cmdsnvars=""
elif [[ ${prev1} == deps ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == cover ]] ; then
      sopts="-r -v -m"
       lopts="--reset --verbose --min_coverage"
       cmdsnvars=""
elif [[ ${prev1} == completion ]] ; then
      sopts="-a -f -s"
       lopts="--aliases --file --shell"
       cmdsnvars=""
elif [[ ${prev1} == compile ]] ; then
      sopts="-d"
       lopts="--deps_only"
       cmdsnvars=""
elif [[ ${prev1} == ct ]] ; then
      sopts="-c -v"
       lopts="--dir --suite --group --case --label --config --spec --join_specs --allow_user_terms --logdir --logopts --verbosity --cover --cover_export_name --repeat --duration --until --force_stop --basic_html --stylesheet --decrypt_key --decrypt_file --abort_if_missing_suites --multiply_timetraps --scale_timetraps --create_priv_dir --include --readable --verbose --name --sname --setcookie --sys_config --compile_only --retry --fail_fast"
       cmdsnvars=""
elif [[ ${prev1} == clean ]] ; then
      sopts="-a -p"
       lopts="--all --apps --profile"
       cmdsnvars=""
elif [[ ${prev1} == as ]] ; then
      sopts=""
       lopts=""
       cmdsnvars="test prod"
elif [[ ${prev1} == test && ${prev2} == as ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
elif [[ ${prev1} == prod && ${prev2} == as ]] ; then
      sopts=""
       lopts=""
       cmdsnvars=""
       fi
    COMPREPLY=( $(compgen -W "${sopts} ${lopts} ${cmdsnvars} " -- ${cur}) )
    if [ -n "$COMPREPLY" ] ; then
        # append space if matched
       COMPREPLY="${COMPREPLY} "
        # remove trailing space after equal sign
        COMPREPLY=${COMPREPLY/%= /=}
    fi
    return 0
}
complete -o nospace -F _rebar3 rebar3

